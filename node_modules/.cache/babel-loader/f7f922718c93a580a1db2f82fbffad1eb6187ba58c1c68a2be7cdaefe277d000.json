{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECT_BLOCKCHAIN\\\\FinalMainProject\\\\blockchain\\\\src\\\\components\\\\Connect.jsx\";\n// Thư viện  Web3.js được sử dụng để tương tác với blockchain Ethereum\nimport Web3 from \"web3\";\n// 'contractABI' của smart contract Record, mô tả cách giao tiếp với smart contract\nimport contractABI from \"../contracts/record.json\";\n\n// address of Twitter contract\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x72725AfA437aC1664Cb22d2aef8841b1260Ca1D\";\nconst Connect = ({\n  web3,\n  account,\n  setAccount,\n  setWeb3\n}) => {\n  // Hàm này được sử dụng để chuyển đổi mạng MetaMask sang mạng sepolia. Nếu mạng chưa được thêm, hàm sẽ tạo nó\n  async function switchToSepolia() {\n    try {\n      // Request user to switch to Sepolia\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: \"0xaa36a7\"\n        }] // Chain ID for Sepolia in hexadecimal\n      });\n    } catch (switchError) {\n      if (switchError.code === 4902) {\n        try {\n          // If Sepolia is not added to user's MetaMask, add it\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: \"0xaa36a7\",\n              chainName: \"Sepolia\",\n              nativeCurrency: {\n                name: \"ETH\",\n                symbol: \"ETH\",\n                decimals: 18\n              },\n              rpcUrls: [\"https://rpc.sepolia.org\"]\n            }]\n          });\n        } catch (addError) {\n          console.error(\"Failed to add Sepolia network to MetaMask\", addError);\n        }\n      } else {\n        console.error(\"Failed to switch to Sepolia network\", switchError);\n      }\n    }\n  }\n\n  // Hàm này được gọi khi người dùng nhấn vào nút \"Connect Wallet\".\n  async function connectWallet() {\n    if (window.ethereum) {\n      try {\n        // Nó kiểm tra xem có 'window.ethereum' không, tức là người dùng đã có MetaMask hoặc một ví Ethereum khác đã tích hợp\n        // Nếu có, nó yêu cầu người dùng cho phép ứng dụng kết nối với ví của họ thông qua window.ethereum.enable().\n        await window.ethereum.enable();\n        const networkId = await window.ethereum.request({\n          method: \"net_version\"\n        });\n        // Sau đó, nó kiểm tra networkId để đảm bảo rằng ứng dụng đang chạy trên mạng chính Ethereum (networkId === \"100\"). \n        //Nếu không, nó chuyển đổi sang mạng Sepolia bằng cách gọi hàm switchToSepolia.\n        if (networkId !== \"100\") {\n          // Network ID for Sepolia\n          await switchToSepolia();\n        }\n\n        // user enables the app to connect to MetaMask\n        // Sau khi mạng được xác định, một đối tượng Web3 mới được tạo với window.ethereum.\n        const tempWeb3 = new Web3(window.ethereum);\n        setWeb3(tempWeb3);\n        console.log(\"HIIIIIII\");\n        // Sử dụng tempWeb3 để lấy danh sách tất cả các tài khoản được kết nối với MetaMask hoặc dịch vụ Ethereum khác.\n        // eth.getAccounts() là một phương thức của Web3.js trả về một promise chứa danh sách các địa chỉ tài khoản.\n        const accounts = await tempWeb3.eth.getAccounts();\n        console.log(\"ACCOUNTS\", accounts);\n        // Nếu có ít nhất một tài khoản được trả về từ MetaMask hoặc dịch vụ ethereum \n        // thì cập nhật giá trị của biến 'contractInstance' và 'account' bằng cách sử dụng 'setContract' và 'setAccount'\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n        }\n        console.log(\"NAHHHHHH\");\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      alert(\"No web3 provider detected\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connect\",\n      children: !account ? /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"connectWalletBtn\",\n        className: \"btn btn-outline-neu\",\n        onClick: connectWallet,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this) : console.log(\"Success\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"connectMessage\",\n      children: !account ? \"Please connect your wallet to tweet.\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = Connect;\nexport default Connect;\nvar _c;\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"names":["Web3","contractABI","jsxDEV","_jsxDEV","Fragment","_Fragment","contractAddress","Connect","web3","account","setAccount","setWeb3","switchToSepolia","window","ethereum","request","method","params","chainId","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","addError","console","error","connectWallet","enable","networkId","tempWeb3","log","accounts","eth","getAccounts","length","alert","children","className","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/PROJECT_BLOCKCHAIN/FinalMainProject/blockchain/src/components/Connect.jsx"],"sourcesContent":["// Thư viện  Web3.js được sử dụng để tương tác với blockchain Ethereum\r\nimport Web3 from \"web3\";\r\n// 'contractABI' của smart contract Record, mô tả cách giao tiếp với smart contract\r\nimport contractABI from \"../contracts/record.json\";\r\n\r\n// address of Twitter contract\r\nconst contractAddress = \"0x72725AfA437aC1664Cb22d2aef8841b1260Ca1D\";\r\n\r\nconst Connect = ({\r\n  web3,\r\n  account,\r\n  setAccount,\r\n  setWeb3\r\n}) => {\r\n  // Hàm này được sử dụng để chuyển đổi mạng MetaMask sang mạng sepolia. Nếu mạng chưa được thêm, hàm sẽ tạo nó\r\n  async function switchToSepolia() {\r\n    try {\r\n      // Request user to switch to Sepolia\r\n      await window.ethereum.request({\r\n        method: \"wallet_switchEthereumChain\",\r\n        params: [{ chainId: \"0xaa36a7\" }] // Chain ID for Sepolia in hexadecimal\r\n      });\r\n    } catch (switchError) {\r\n      if (switchError.code === 4902) {\r\n        try {\r\n          // If Sepolia is not added to user's MetaMask, add it\r\n          await window.ethereum.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: [\r\n              {\r\n                chainId: \"0xaa36a7\",\r\n                chainName: \"Sepolia\",\r\n                nativeCurrency: {\r\n                  name: \"ETH\",\r\n                  symbol: \"ETH\",\r\n                  decimals: 18\r\n                },\r\n                rpcUrls: [\"https://rpc.sepolia.org\"]\r\n              }\r\n            ]\r\n          });\r\n        } catch (addError) {\r\n          console.error(\"Failed to add Sepolia network to MetaMask\", addError);\r\n        }\r\n      } else {\r\n        console.error(\"Failed to switch to Sepolia network\", switchError);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Hàm này được gọi khi người dùng nhấn vào nút \"Connect Wallet\".\r\n  async function connectWallet() {\r\n    if (window.ethereum) {\r\n      try {\r\n        // Nó kiểm tra xem có 'window.ethereum' không, tức là người dùng đã có MetaMask hoặc một ví Ethereum khác đã tích hợp\r\n        // Nếu có, nó yêu cầu người dùng cho phép ứng dụng kết nối với ví của họ thông qua window.ethereum.enable().\r\n        await window.ethereum.enable();\r\n        const networkId = await window.ethereum.request({\r\n          method: \"net_version\"\r\n        });\r\n        // Sau đó, nó kiểm tra networkId để đảm bảo rằng ứng dụng đang chạy trên mạng chính Ethereum (networkId === \"100\"). \r\n        //Nếu không, nó chuyển đổi sang mạng Sepolia bằng cách gọi hàm switchToSepolia.\r\n        if (networkId !== \"100\") {\r\n          // Network ID for Sepolia\r\n          await switchToSepolia();\r\n        }\r\n\r\n        // user enables the app to connect to MetaMask\r\n        // Sau khi mạng được xác định, một đối tượng Web3 mới được tạo với window.ethereum.\r\n        const tempWeb3 = new Web3(window.ethereum);\r\n        setWeb3(tempWeb3);\r\n        console.log(\"HIIIIIII\");\r\n        // Sử dụng tempWeb3 để lấy danh sách tất cả các tài khoản được kết nối với MetaMask hoặc dịch vụ Ethereum khác.\r\n        // eth.getAccounts() là một phương thức của Web3.js trả về một promise chứa danh sách các địa chỉ tài khoản.\r\n        const accounts = await tempWeb3.eth.getAccounts();\r\n        console.log(\"ACCOUNTS\", accounts);\r\n        // Nếu có ít nhất một tài khoản được trả về từ MetaMask hoặc dịch vụ ethereum \r\n        // thì cập nhật giá trị của biến 'contractInstance' và 'account' bằng cách sử dụng 'setContract' và 'setAccount'\r\n        if (accounts.length > 0){\r\n          setAccount(accounts[0]);\r\n        }\r\n        console.log(\"NAHHHHHH\");\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    } else {\r\n      alert(\"No web3 provider detected\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n  {/*Một biểu thức điều kiện ({!account ? ... : ...}) kiểm tra xem có một tài khoản đang được kết nối hay không\r\n     Nếu không có tài khoản (!account là true), hiển thị nút \"Connect Wallet\". \r\n     Nếu có tài khoản, chuyển sang phần thứ hai của biểu thức điều kiện.*/}\r\n      <div className=\"connect\">\r\n        {!account ? (\r\n          <button id=\"connectWalletBtn\" className=\"btn btn-outline-neu\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        ) : (\r\nconsole.log(\"Success\")\r\n        )}\r\n      </div>\r\n      <div id=\"connectMessage\">\r\n        {!account ? \"Please connect your wallet to tweet.\" : \"\"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Connect;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}